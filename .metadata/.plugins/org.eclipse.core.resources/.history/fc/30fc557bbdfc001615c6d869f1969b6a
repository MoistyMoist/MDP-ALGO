package com.sg.ntu.mdp;

import com.sg.ntu.mdp.simulator.MapUI;

public class Algothrim {
	private float coverageLimit = 100f;
	private float timeLimit = 500f;//TODO: change this later
	
	public static Direction currentDirection = Direction.East;
	private float sensorTrashold = 1.00f;
	
	public static int[][]exploredData = new int[20][15];
	public static int[][]obstacleData = new int[20][15];
	public static int[][]unreachableData = new int[20][15];
	public static int currentLocationFrontRow;
	public static int currentLocationFrontCol;
	
	public Algothrim(int[][] exploredData, int[][]obstacleData, int currentLocationFrontRow, int currentLocationFrontCol){
		//set the goal and start area to explored
		this.exploredData[19][0] = 1; this.exploredData[0][14] = 1;
		this.exploredData[19][1] = 1; this.exploredData[0][13] = 1;
		this.exploredData[19][2] = 1; this.exploredData[0][12] = 1;
		this.exploredData[18][0] = 1; this.exploredData[1][14] = 1;
		this.exploredData[18][1] = 1; this.exploredData[1][13] = 1;
		this.exploredData[18][2] = 1; this.exploredData[1][12] = 1;
		this.exploredData[17][0] = 1; this.exploredData[2][14] = 1;
		this.exploredData[17][1] = 1; this.exploredData[2][13] = 1;
		this.exploredData[17][2] = 1; this.exploredData[2][12] = 1;
		
		if(currentLocationFrontRow != -1 && currentLocationFrontCol!=-1){
			//TODO:change the starting direction base on the row,col (17,2[east),etc
			this.currentLocationFrontRow = currentLocationFrontRow;
			this.currentLocationFrontCol = currentLocationFrontCol;
		}
	}
	
	
	//***************************************//
	//EXPLORATION METHODS FOR REAL SITUATION //
	//***************************************//
	public void explore(float frontMidSensor, float frontLeftSensor, float frontRightSensor, float rightSensor, float leftSensor, final RobotCallback callback){
		if(leftSensor<=sensorTrashold){
			//obstacle on robot left
			//update the obstacle data
			switch(currentDirection){
				case North: 
					if(currentLocationFrontCol-2>=-1)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case South: 
					if(currentLocationFrontCol+2>=15)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case East: 
					if(currentLocationFrontRow-2>=-1)
						addObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
				case West: 
					if(currentLocationFrontRow+2>=20)
						addObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
			}
		}
		if(rightSensor<=sensorTrashold){
			//obstacle on robot right
			//update the obstacle data
			switch(currentDirection){
				case North:
					if(currentLocationFrontCol+2>=15)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case South:
					if(currentLocationFrontCol-2>=-1)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case East:
					if(currentLocationFrontRow+2>=20)
						addObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
				case West:
					if(currentLocationFrontRow-2>=-1)
						addObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
			}
		}
		
		if(isRobotWithinGoalArea()){
			returnToStart();
		}else{
			//continue exploring
			//main decision making depending on the direction and current location of the robot(goal direction is always north east)
			if(currentDirection == Direction.North){
				if(currentLocationFrontRow==0){
					//if east path has not obstacle
					if(obstacleData[0][currentLocationFrontCol+2]!=1&&
							obstacleData[currentLocationFrontRow+1][currentLocationFrontCol+2]!=1&&
							obstacleData[currentLocationFrontCol+2][currentLocationFrontCol+2]!=1){
//						callback.changeDirection(Direction.East);
						this.currentDirection = Direction.East;
						callback.moveForward(1);
						//TODO update the current location after moving forward
					}
					else{
						int distance = 0;
						//we move backwards (x distance) till we can move east
						while(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol+2]==1&&
								obstacleData[currentLocationFrontCol+2][currentLocationFrontCol+2]==1&&
								obstacleData[currentLocationFrontCol][currentLocationFrontCol+2]==1){
							distance++;
						}
//						callback.changeDirection(Direction.South);
						this.currentDirection = Direction.South;
						callback.moveForward(distance);
					}
					
				}
				else if(frontMidSensor>sensorTrashold && frontRightSensor>sensorTrashold && frontLeftSensor>sensorTrashold){
					callback.moveForward(1);
				}
			}
			if(currentDirection == Direction.South){
				//for some reason we are facing south means north direction is blocked we move to the east
				if(frontMidSensor>sensorTrashold && frontRightSensor>sensorTrashold && frontLeftSensor>sensorTrashold){
					//nothing infront move forward
				}
			}
			if(currentDirection == Direction.East){
				if(frontMidSensor>sensorTrashold && frontRightSensor>sensorTrashold && frontLeftSensor>sensorTrashold){
					//nothing infront move forward
				}
			}
			if(currentDirection == Direction.West){
				if(frontMidSensor>sensorTrashold && frontRightSensor>sensorTrashold && frontLeftSensor>sensorTrashold){
					//nothing infront move forward
				}
			}
		}	
	}
	
	
	//***************************************//
	//  EXPLORATION METHODS FOR SIMULATION	 //
	//***************************************//
	//@Notes: focus on facing east going row by row towards 0
	//@Notes: we focus on this first since it is a requirement
	public void exploreSimulation(float frontMidSensor, float frontLeftSensor, float frontRightSensor, float rightSensor, float leftSensor, final RobotCallback callback){
		if(isExporeCoverageReached()){
			returnToStart();
		}else{
			if(leftSensor>=sensorTrashold){
//				System.out.println("OBSTICAL AT LEFT SENSOR");
				//obstacle on robot left
				//update the obstacle data
				switch(currentDirection){
					case North: 
						if(currentLocationFrontCol-2>=0)
							addObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
						break;
					case South: 
						if(currentLocationFrontCol+2<=14)
							addObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
						break;
					case East: 
						if(currentLocationFrontRow-2>=0)
							addObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
						break;
					case West: 
						if(currentLocationFrontRow+2<=19)
							addObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
						break;
				}
			}
			if(rightSensor>=sensorTrashold){
//				System.out.println("OBSTICAL AT RIGHT SENSOR");
				//obstacle on robot right
				//update the obstacle data
				switch(currentDirection){
					case North:
						if(currentLocationFrontCol+2<=14)
							addObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
						break;
					case South:
						if(currentLocationFrontCol-2>=0)
							addObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
						break;
					case East:
						if(currentLocationFrontRow+2<=19)
							addObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
						break;
					case West:
						if(currentLocationFrontRow-2>=0)
							addObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
						break;
				}
			}
			if(frontMidSensor>=sensorTrashold){
//				System.out.println("OBSTICAL AT MID SENSOR");
				//obstacle on robot mid front
				//update the obstacle data
				switch(currentDirection){
					case North:
						if(currentLocationFrontRow-1>=0)
							addObstacle(currentLocationFrontRow-1,currentLocationFrontCol);
						break;
					case South:
						if(currentLocationFrontRow+1<=19)
							addObstacle(currentLocationFrontRow+1,currentLocationFrontCol);
						break;
					case East:
						if(currentLocationFrontCol+1<=14)
							addObstacle(currentLocationFrontRow,currentLocationFrontCol+1);
						break;
					case West:
						if(currentLocationFrontCol-1>=0)
							addObstacle(currentLocationFrontRow-1,currentLocationFrontCol);
						break;
				}
			}
			if(frontLeftSensor>=sensorTrashold){
//				System.out.println("OBSTICAL AT FRONT LEFT SENSOR");
				//obstacle on robot front left
				//update the obstacle data
				switch(currentDirection){
					case North:
						if(currentLocationFrontRow-1>=0)
							addObstacle(currentLocationFrontRow-1,currentLocationFrontCol-1);
						break;
					case South:
						if(currentLocationFrontRow+1<=19)
							addObstacle(currentLocationFrontRow+1,currentLocationFrontCol+1);
						break;
					case East:
						if(currentLocationFrontCol+1<=14)
							addObstacle(currentLocationFrontRow-1,currentLocationFrontCol+1);
						break;
					case West:
						if(currentLocationFrontCol-1>=0)
							addObstacle(currentLocationFrontRow+1,currentLocationFrontCol-1);
						break;
				}
			}
			if(frontRightSensor>=sensorTrashold){
//				System.out.println("OBSTICAL AT FRONT RIGHT SENSOR");
				//obstacle on robot front right
				//TODO:update the obstacle data
				switch(currentDirection){
					case North:
						if(currentLocationFrontRow-1>=0)
							addObstacle(currentLocationFrontRow-1,currentLocationFrontCol+1);
						break;
					case South:
						if(currentLocationFrontRow+1<=19)
							addObstacle(currentLocationFrontRow+1,currentLocationFrontCol-1);
						break;
					case East:
						if(currentLocationFrontCol+1<=14)
							addObstacle(currentLocationFrontRow+1,currentLocationFrontCol+1);
						break;
					case West:
						if(currentLocationFrontCol-1>=0)
							addObstacle(currentLocationFrontRow-1,currentLocationFrontCol-1);
						break;
				}
			}
			
			
			//todo:error here
			//we move forward till there is a wall
			boolean breakloop = false;
			for(int i=19;i>1;i--){
				for(int j=0;j<15;j++){
//					System.out.println(i+","+j+" ");
//					System.out.println(obstacleData[i][j]);
					if(exploredData[i][j]==0&&obstacleData[i][j]==0){
//						System.out.println(i+","+j);
						//TODO: check if this grid is accessable (for now jus check if surrounding can fit a robot)
//						if()
						//base on 1x1 grid of head
						switch(currentDirection){
							case North:
								makeDecisionFacingNorth(i,j,callback);
								break;
							case South:
								makeDecisionFacingSouth(i,j,callback);
								break;
							case East:
								makeDecisionFacingEast(i,j,callback);
								break;
							case West:
								makeDecisionFacingWest(i,j,callback);
								break;
								
						}
						breakloop=true;
						if(breakloop==true)
							break;
					}
				}
				if(breakloop==true)
					break;
			}
		}
	}
	
	private void makeDecisionFacingNorth(int row, int col,final RobotCallback callback){
		System.out.println("INSTRUCTION FACING NORTH");
		int counter = 0;
		int exploredCounter = 0;
		boolean isLeftWall = false;
		boolean isRightWall = false;
		boolean isFrontWall = false;
		boolean isBackWall = false;
		
		boolean isLeftExplored = false;
		int []leftUnExploredPositionCount = {0,0,0};
		boolean isRightExplored = false;
		int []rightUnExploredPositionCount = {0,0,0};
		boolean isBackExplored = false;
		int []backUnExploredPositionCount = {0,0,0};
		boolean isFrontExplored = false;
		int []frontUnExploredPositionCount = {0,0,0};
		
		boolean isRightObstacle = false;
		int []rightObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isLeftObstacle = false;
		int []leftObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isFrontObstacle = false;
		int []FrontObstaclePositionCount = {0,0,0};//index 0 = left of head
		boolean isBackObstacle = false;
		int []BackObstaclePositionCount = {0,0,0};//index 0 = left of head
		//check for walls
		if(currentLocationFrontCol+2>=15){
			isRightWall = true;
		}
		if(currentLocationFrontCol-2<0){
			isLeftWall = true;
		}
		if(currentLocationFrontRow-1<0){
			isFrontWall = true;
		}
		if(currentLocationFrontRow+3>19){
			isBackWall = true;
		}
		//check for obstacle
		if(isRightWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol+2]==0){
					rightUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol+2]==0){
					rightUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol+2]==0){
					rightUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isRightObstacle = false;
			}else{
				isRightObstacle = true;
			}
			if(exploredCounter==3){
				isRightExplored =true;
			}else{
				isRightExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isLeftWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol-2]==0){
					leftUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol-2]==0){
					leftUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol-2]==0){
					leftUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isLeftObstacle = false;
			}else{
				isLeftObstacle = true;
			}
			if(exploredCounter==3){
				isLeftExplored =true;
			}else{
				isLeftExplored =false;
			}
			System.out.println("exporeed counter= "+exploredCounter);
			exploredCounter=0;
			counter = 0;
		}
		if(isFrontWall==false){
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol]==0){
					frontUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[1]=1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol+1]==0){
					frontUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[2]=1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol-1]==0){
					frontUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[0] = 1;
			}
			if(counter==3){
				isFrontObstacle = false;
			}else{
				isFrontObstacle = true;
			}
			if(exploredCounter==3){
				isFrontExplored =true;
			}else{
				isFrontExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isBackWall==false){
			if(obstacleData[currentLocationFrontRow+3][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+3][currentLocationFrontCol]==0){
					backUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow+3][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+3][currentLocationFrontCol+1]==0){
					backUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[2] = 1;
			}
			if(obstacleData[currentLocationFrontRow+3][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+3][currentLocationFrontCol-1]==0){
					backUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[0] = 1;
			}
			if(counter==3){
				isBackObstacle = false;
			}else{
				isBackObstacle = true;
			}
			if(exploredCounter==3){
				isBackExplored =true;
			}else{
				isBackExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		
		
		
		//FACING NORTH TARGET FRONT
		if((currentLocationFrontRow>row&&currentLocationFrontCol==col)||(currentLocationFrontRow>row&&currentLocationFrontCol-1==col)||(currentLocationFrontRow>row&&currentLocationFrontCol+1==col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET FRONT");
		}
		
		//FACING NORTH TARGET LEFT
		else if((currentLocationFrontRow==row&&currentLocationFrontCol>col)||(currentLocationFrontRow-1==row&&currentLocationFrontCol>col)||(currentLocationFrontRow+1==row&&currentLocationFrontCol>col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET FRONT");
		}
				
		//FACING NORTH TARGET RIGHT
		else if((currentLocationFrontRow==row&&currentLocationFrontCol<col)||(currentLocationFrontRow==row+1&&currentLocationFrontCol<col)||(currentLocationFrontRow+2==row&&currentLocationFrontCol<col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET RIGHT");
			if(isRightWall==false && isRightObstacle ==false){
				callback.changeDirection(Direction.RIGHT, 1);
				callback.moveForward(1);
			}
			else if(isFrontWall==false && isFrontObstacle == false){
				callback.moveForward(1);
			}
			else if(isLeftWall==false && isLeftObstacle == false){
				callback.changeDirection(Direction.LEFT, 1);
				callback.moveForward(1);
			}
			else if(isBackWall == false && isBackObstacle==false){
				callback.changeDirection(Direction.RIGHT, 2);
				callback.moveForward(1);
			}
		}
		//FACING NORTH TARGET BOTTOM
		else if((currentLocationFrontRow<row&&currentLocationFrontCol==col)||(currentLocationFrontRow<row&&currentLocationFrontCol-1==col)||(currentLocationFrontRow<row&&currentLocationFrontCol+1==col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET BOTTOM");
			if(isRightExplored==false&&isRightObstacle==false&&isRightWall==false){
					callback.changeDirection(Direction.RIGHT, 1);
			}
			else if(isLeftExplored==false&&isLeftObstacle==false&&isLeftWall==false){
					callback.changeDirection(Direction.LEFT, 1);
			}else{
				if(isFrontWall==false&& isFrontObstacle){
					callback.moveForward(1);
				}else{
					System.out.println("ERROR: FACING NORTH TARGET BOTTOM");
				}
			}
		}
		
		//FACING NORTH TARGET FRONT LEFT
		else if((currentLocationFrontRow>row&&currentLocationFrontCol>col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET FRONT LEFT");
		}
		//FACING NORTH TARGET FRONT RIGHT
		else if((currentLocationFrontRow>row&&currentLocationFrontCol<col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET FRONT RIGHT");
		}

		//FACING NORTH TARGET BOTTOM LEFT
		else if((currentLocationFrontRow<row&&currentLocationFrontCol>col)){
			System.out.println("INSTRUCTION FACING NORTH TARGET BOTTOM LEFT");
		}
		
		//FACING NORTH TARGET BOTTOM RIGHT
		else if(currentLocationFrontRow<row&&currentLocationFrontCol<col){
			System.out.println("INSTRUCTION FACING NORTH TARGET BOTTOM RIGHT");
			if(isRightObstacle==false){
				callback.changeDirection(Direction.RIGHT, 1);
				callback.moveForward(1);
			}
			else{
				if(isLeftWall==true && isRightObstacle==true){
					if(rightObstaclePositionCount[2]==1){
						callback.moveForward(1);
					}else if(rightObstaclePositionCount[1]==1){
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}
				}
				else if(isLeftWall==false && isRightObstacle==true){
					if(rightObstaclePositionCount[2]==1){
						System.out.println("ERROR: here1");
						callback.moveForward(1);
					}else if(rightObstaclePositionCount[1]==1){
						System.out.println("ERROR: here2");
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						System.out.println("ERROR: here");
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}
				}
				else{
					System.out.println("ERROR: FACING NORTH TARGET BOTTOM RIGHT");
				}
				
				
			}
		}
	
		
	}
	private void makeDecisionFacingSouth(int row, int col, final RobotCallback callback){
		int counter = 0;
		int exploredCounter = 0;
		boolean isLeftWall = false;
		boolean isRightWall = false;
		boolean isFrontWall = false;
		boolean isBackWall = false;
		
		boolean isLeftExplored = false;
		int []leftUnExploredPositionCount = {0,0,0};
		boolean isRightExplored = false;
		int []rightUnExploredPositionCount = {0,0,0};
		boolean isBackExplored = false;
		int []backUnExploredPositionCount = {0,0,0};
		boolean isFrontExplored = false;
		int []frontUnExploredPositionCount = {0,0,0};
		
		boolean isRightObstacle = false;
		int []rightObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isLeftObstacle = false;
		int []leftObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isFrontObstacle = false;
		int []FrontObstaclePositionCount = {0,0,0};//index 0 = left of head
		boolean isBackObstacle = false;
		int []BackObstaclePositionCount = {0,0,0};//index 0 = left of head
		
		if(currentLocationFrontCol-2<0){
			isRightWall = true;
		}
		if(currentLocationFrontCol+2>14){
			isLeftWall = true;
		}
		if(currentLocationFrontRow+1>19){
			isFrontWall = true;
		}
		if(currentLocationFrontRow-3<0){
			isBackWall = true;
		}
		
		if(isRightWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol-2]==0){
					rightUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol-2]==0){
					rightUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol-2]==0){
					rightUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isRightObstacle = false;
			}else{
				isRightObstacle = true;
			}
			if(exploredCounter==3){
				isRightExplored =true;
			}else{
				isRightExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isLeftWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol+2]==0){
					leftUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol+2]==0){
					leftUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol+2]==0){
					leftUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isLeftObstacle = false;
			}else{
				isLeftObstacle = true;
			}
			if(exploredCounter==3){
				isLeftExplored =true;
			}else{
				isLeftExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isFrontWall==false){
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol]==0){
					frontUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[1]=1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol+1]==0){
					frontUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[0]=1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol-1]==0){
					frontUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isFrontObstacle = false;
			}else{
				isFrontObstacle = true;
			}
			if(exploredCounter==3){
				isFrontExplored =true;
			}else{
				isFrontExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isBackWall==false){
			if(obstacleData[currentLocationFrontRow-3][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-3][currentLocationFrontCol]==0){
					backUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-3][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-3][currentLocationFrontCol+1]==0){
					backUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow-3][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-3][currentLocationFrontCol-1]==0){
					backUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isBackObstacle = false;
			}else{
				isBackObstacle = true;
			}
			if(exploredCounter==3){
				isBackExplored =true;
			}else{
				isBackExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		
		//FACING SOUTH TARGET IS FRONT
		if((currentLocationFrontRow<row&&currentLocationFrontCol==col)||(currentLocationFrontRow<row&&currentLocationFrontCol==col-1)||(currentLocationFrontRow<row&&currentLocationFrontCol==col+1)){
			System.out.println("INSTRUCTION FACING SOUTH TARGET FRONT");
			if(isFrontObstacle==false){
				callback.moveForward(1);
			}else{
				System.out.println("ERROR: FACING SOUTH TARGET FRONT");
			}
		}
		//FACING SOUTH TARGET IS LEFT
		else if((currentLocationFrontRow==row&&currentLocationFrontCol<col)||(currentLocationFrontRow-1==row&&currentLocationFrontCol<col)||(currentLocationFrontRow-2==row&&currentLocationFrontCol<col)){
			System.out.println("INSTRUCTION FACING SOUTH TARGET LEFT");
			if(isLeftObstacle==false){
				callback.changeDirection(Direction.LEFT, 1);
				callback.moveForward(1);
			}else{
				
			}System.out.println("ERROR: FACING SOUTH TARGET LEFT");
		}
		
		//FACING SOUTH TARGET RIGHT
		else if((currentLocationFrontRow==row&&currentLocationFrontCol>col)||(currentLocationFrontRow-1==row&&currentLocationFrontCol>col)||(currentLocationFrontRow-2==row&&currentLocationFrontCol>col)){
			System.out.println("INSTRUCTION FACING SOUTH TARGET RIGHT");
			if(isRightObstacle==false){
				callback.changeDirection(Direction.RIGHT, 1);
			}else{
				System.out.println("ERROR: FACING SOUTH TARGET RIGHT");
			}
		}
		//FACING SOUTH TARGET BOTTOM
		
		
		
		
		//FACING SOUTH TARGET TOP RIGHT
		else if(currentLocationFrontRow<row&&currentLocationFrontCol>col){
			System.out.println("INSTRUCTION FACING SOUTH TARGET TOP RIGHT");
			if(isFrontObstacle==false){
				callback.moveForward(1);
			}else{
				System.out.println("ERROR: FACING SOUTH TARGET TOP RIGHT");
			}
		}
		//FACING SOUTH TARGET TOP LEFT
		
		//FACING SOUTH TARGET BOTTOM LEFT
		
		//FACING SOUTH TARGET BOTTOM RIGHT
		
	}
	private void makeDecisionFacingEast(int row, int col, final RobotCallback callback){
		int counter = 0;
		int exploredCounter = 0;
		boolean isLeftWall = false;
		boolean isRightWall = false;
		boolean isFrontWall = false;
		boolean isBackWall = false;
		
		boolean isLeftExplored = false;
		int []leftUnExploredPositionCount = {0,0,0};
		boolean isRightExplored = false;
		int []rightUnExploredPositionCount = {0,0,0};
		boolean isBackExplored = false;
		int []backUnExploredPositionCount = {0,0,0};
		boolean isFrontExplored = false;
		int []frontUnExploredPositionCount = {0,0,0};
		
		boolean isRightObstacle = false;
		int []rightObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isLeftObstacle = false;
		int []leftObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isFrontObstacle = false;
		int []FrontObstaclePositionCount = {0,0,0};//index 0 = left of head
		boolean isBackObstacle = false;
		int []BackObstaclePositionCount = {0,0,0};//index 0 = left of head
		
		if(currentLocationFrontRow+2>19){
			isRightWall = true;
		}
		if(currentLocationFrontRow-2<0){
			isLeftWall = true;
		}
		if(currentLocationFrontCol+1>14){
			isFrontWall = true;
		}
		if(currentLocationFrontCol-3<0){
			isBackWall = true;
		}
		if(isRightWall==false){
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol]==0){
					rightUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol-1]==0){
					rightUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol-2]==0){
					rightUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isRightObstacle = false;
			}else{
				isRightObstacle = true;
			}
			if(exploredCounter==3){
				isRightExplored =true;
			}else{
				isRightExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isLeftWall==false){
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol]==0){
					leftUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol-1]==0){
					leftUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol-2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol-2]==0){
					leftUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isLeftObstacle = false;
			}else{
				isLeftObstacle = true;
			}
			if(exploredCounter==3){
				isLeftExplored =true;
			}else{
				isLeftExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isFrontWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol+1]==0){
					frontUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[1]=1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol+1]==0){
					frontUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[0]=1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol+1]==0){
					frontUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isFrontObstacle = false;
			}else{
				isFrontObstacle = true;
			}
			if(exploredCounter==3){
				isFrontExplored =true;
			}else{
				isFrontExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isBackWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol-3]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol-3]==0){
					backUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol-3]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol-3]==0){
					backUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol-3]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol-3]==0){
					backUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isBackObstacle = false;
			}else{
				isBackObstacle = true;
			}
			if(exploredCounter==3){
				isBackExplored =true;
			}else{
				isBackExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		
		
		
		//FACING EAST TARGET FRONT
		if((currentLocationFrontRow==row&&currentLocationFrontCol<col)||(currentLocationFrontRow-1==row&&currentLocationFrontCol<col)||(currentLocationFrontRow+1==row&&currentLocationFrontCol<col)){					
			System.out.println("INSTRUCTION FACING EAST TARGET FRONT");
			if(isFrontWall==false && isFrontObstacle==false){
				callback.moveForward(1);
			}else{
				if((isRightWall==true&&isLeftObstacle==true)){
					callback.changeDirection(Direction.LEFT, 2);
					if(leftObstaclePositionCount[2]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}
					else if(leftObstaclePositionCount[1]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						callback.moveForward(1);
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}
				}
				else if(isLeftWall==true && isRightObstacle==true){
					if(rightObstaclePositionCount[2]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}
					else if(rightObstaclePositionCount[1]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						callback.moveForward(1);
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}
				}
				else if(isLeftObstacle==true && isRightObstacle==true){//can be changed later
					if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol]==0||exploredData[currentLocationFrontRow+2][currentLocationFrontCol-1]==0||exploredData[currentLocationFrontRow+2][currentLocationFrontCol-2]==0){
						callback.changeDirection(Direction.RIGHT, 1);
						callback.moveForward(1);
					}else{
						callback.changeDirection(Direction.LEFT, 1);
						callback.moveForward(1);
					}
				}
				else if(isLeftObstacle==true && isRightObstacle==false){
					callback.changeDirection(Direction.RIGHT, 1);
					callback.moveForward(1);
				}
				else if(isLeftObstacle==false && isRightObstacle==true){
					callback.changeDirection(Direction.LEFT, 1);
					callback.moveForward(1);
				}else if(isRightWall==true && isLeftObstacle==false){
					callback.changeDirection(Direction.LEFT, 1);
					if(FrontObstaclePositionCount[2]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}else if(FrontObstaclePositionCount[1]==1){
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						callback.moveForward(1);
					}
				}
				else{
					System.out.println("ERROR: FACING EAST TARGET INFRONT");
				}
			}
		}
		//target grid backward of robot
		
		
		//FACING EAST TARGET LEFT
		else if((currentLocationFrontRow>row&& currentLocationFrontCol==col)||(currentLocationFrontRow>row&& currentLocationFrontCol-1==col)||(currentLocationFrontRow>row&& currentLocationFrontCol-2==col)){
			System.out.println("INSTRUCTION FACING EAST TARGET LEFT");
		}
		
		//FACING EAST TARGET RIGHT
		else if((currentLocationFrontRow<row&& currentLocationFrontCol==col)||(currentLocationFrontRow<row&& currentLocationFrontCol-1==col)||(currentLocationFrontRow<row&& currentLocationFrontCol-2==col)){
			System.out.println("INSTRUCTION FACING EAST TARGET RIGHT");
			if(isRightObstacle==false){
				callback.changeDirection(Direction.RIGHT, 1);
				callback.moveForward(1);
			}else{
				if(isRightObstacle==true && isFrontObstacle==false){
					callback.moveForward(1);
				}
				else if(isRightObstacle==true && isLeftObstacle==true){
					callback.changeDirection(Direction.RIGHT, 2);
					if(leftObstaclePositionCount[2]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}else if(leftObstaclePositionCount[1]==1){
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						callback.moveForward(1);
					}
					callback.changeDirection(Direction.RIGHT, 1);
					
				}else if(isFrontObstacle==true && isRightObstacle==true){
					callback.changeDirection(Direction.LEFT, 1);
				}
				else {
					System.out.println("ERROR: FACING EAST TARGET RIGHT");
				}
			}
		}
		//target grid top right of robot
		else if(currentLocationFrontRow<row&&currentLocationFrontCol<col){
			System.out.println("INSTRUCTION FACING EAST TARGET TOP RIGHT");
			if(isFrontWall==false && isFrontObstacle==false){
				callback.moveForward(1);
			}else{
				if(isRightObstacle==true && isLeftObstacle==true){
					callback.changeDirection(Direction.RIGHT, 2);
					if(leftObstaclePositionCount[2]==1){
						callback.moveForward(1);
						callback.moveForward(1);
						callback.moveForward(1);
					}else if(leftObstaclePositionCount[1]==1){
						callback.moveForward(1);
						callback.moveForward(1);
					}else{
						callback.moveForward(1);
					}
				}else if(isRightObstacle==true && isLeftObstacle==false){
					callback.changeDirection(Direction.LEFT, 1);
//					callback.moveForward(1);
				}
				else{
					System.out.println("ERROR: FACING EAST TARGET TOP RIGHT");
				}	
			}
		}
		
		//target grid top left of robot
		
		//target grid bottom right of robot
		else if(currentLocationFrontRow<row&&currentLocationFrontCol>col){
			System.out.println("INSTRUCTION FACING EAST TARGET BOTTOM RIGHT");
			if(isRightObstacle==false){
				callback.changeDirection(Direction.RIGHT, 1);
				callback.moveForward(1);
			}else{
				System.out.println("ERROR: FACING EAST TARGET BOTTOM RIGHT");
			}
		}
		
		//target grid bottom left of robot
		
	}
	private void makeDecisionFacingWest(int row, int col, final RobotCallback callback){
		int counter = 0;
		int exploredCounter = 0;
		boolean isLeftWall = false;
		boolean isRightWall = false;
		boolean isFrontWall = false;
		boolean isBackWall = false;
		
		boolean isLeftExplored = false;
		int []leftUnExploredPositionCount = {0,0,0};
		boolean isRightExplored = false;
		int []rightUnExploredPositionCount = {0,0,0};
		boolean isBackExplored = false;
		int []backUnExploredPositionCount = {0,0,0};
		boolean isFrontExplored = false;
		int []frontUnExploredPositionCount = {0,0,0};
		
		boolean isRightObstacle = false;
		int []rightObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isLeftObstacle = false;
		int []leftObstaclePositionCount = {0,0,0};//index 0 = nearest to head
		boolean isFrontObstacle = false;
		int []FrontObstaclePositionCount = {0,0,0};//index 0 = left of head
		boolean isBackObstacle = false;
		int []BackObstaclePositionCount = {0,0,0};//index 0 = left of head
		
		if(currentLocationFrontRow-2<0){
			isRightWall = true;
		}
		if(currentLocationFrontRow+2>19){
			isLeftWall = true;
		}
		if(currentLocationFrontCol-1<0){
			isFrontWall = true;
		}
		if(currentLocationFrontCol+3<14){
			isBackWall = true;
		}
		if(isRightWall==false){
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol]==0){
					rightUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol+1]==0){
					rightUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				rightObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-2][currentLocationFrontCol+2]!=1){
				counter++;
			}else{
				if(exploredData[currentLocationFrontRow-2][currentLocationFrontCol+2]==0){
					rightUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
				rightObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isRightObstacle = false;
			}else{
				isRightObstacle = true;
			}
			if(exploredCounter==3){
				isRightExplored =true;
			}else{
				isRightExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isLeftWall==false){
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol]==0){
					leftUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[0] = 1;
			}
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol+1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol+1]==0){
					leftUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow+2][currentLocationFrontCol+2]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+2][currentLocationFrontCol+2]==0){
					leftUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				leftObstaclePositionCount[2] = 1;
			}
			if(counter==3){
				isLeftObstacle = false;
			}else{
				isLeftObstacle = true;
			}
			if(exploredCounter==3){
				isLeftExplored =true;
			}else{
				isLeftExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isFrontWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol-1]==0){
					frontUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[1]=1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol-1]==0){
					frontUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[2]=1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol-1]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol-1]==0){
					frontUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				FrontObstaclePositionCount[0] = 1;
			}
			if(counter==3){
				isFrontObstacle = false;
			}else{
				isFrontObstacle = true;
			}
			if(exploredCounter==3){
				isFrontExplored =true;
			}else{
				isFrontExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		if(isBackWall==false){
			if(obstacleData[currentLocationFrontRow][currentLocationFrontCol+3]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow][currentLocationFrontCol+3]==0){
					backUnExploredPositionCount[1]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[1] = 1;
			}
			if(obstacleData[currentLocationFrontRow-1][currentLocationFrontCol+3]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow-1][currentLocationFrontCol+3]==0){
					backUnExploredPositionCount[2]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[2] = 1;
			}
			if(obstacleData[currentLocationFrontRow+1][currentLocationFrontCol+3]!=1){
				counter++;
				if(exploredData[currentLocationFrontRow+1][currentLocationFrontCol+3]==0){
					backUnExploredPositionCount[0]=1;
					exploredCounter++;
				}
			}else{
				BackObstaclePositionCount[0] = 1;
			}
			if(counter==3){
				isBackObstacle = false;
			}else{
				isBackObstacle = true;
			}
			if(exploredCounter==3){
				isBackExplored =true;
			}else{
				isBackExplored =false;
			}
			exploredCounter=0;
			counter = 0;
		}
		
		
		
		
		
		
		
		//target grid front of robot
		
		//target grid backward of robot
		if((currentLocationFrontRow==row&&currentLocationFrontCol<col)||(currentLocationFrontRow-1==row&&currentLocationFrontCol<col)||(currentLocationFrontRow+1==row&&currentLocationFrontCol<col)){	
			System.out.println("here");
			//smth wrong b4 tats y target at the back
			 isLeftWall = false;
			 isRightWall = false;
			//turn back if left and right has obstacle
			if(currentLocationFrontRow-2>=0){//robot right is not a wall
				isRightWall = false;
			}
			else{
				isRightWall = true;
			}
			if(currentLocationFrontRow+2<=19){//robot left is not a wall
				isLeftWall = false;
			}else{
				isLeftWall = true;
			}
			
			if(isLeftWall==true){
				
			}
		}
		//target grid left of robot
		
		//target grid right of robot
		
		//target grid top right of robot
		
		//target grid top left of robot
		
		//target grid bottom right of robot
		
		//target grid bottom left of robot
	}
	
	//TODO:
	

	private boolean isTargetCellReachable(int row, int col){
		return false;
	}
	private boolean isExporeCoverageReached(){
		int exploredCount= 0;
		for(int i=0;i<exploredData.length;i++){
			for(int j=0;j<exploredData[i].length;j++){
				if(exploredData[i][j]==1){
					exploredCount ++;
				}
			}
		}
		if(exploredCount/300*100>=this.coverageLimit)
			return true;
		else
			return false;
	}
	//TODO: used for true exploration not for simulation
	private boolean isRobotWithinGoalArea(){
		//within doesent mean the robot is fully in the goal area only means the head is in the goal area
		return false;
	}
	public void addObstacle(int frontMidSensor, int frontLeftSensor, int frontRightSensor, int rightSensor, int leftSensor){
		if(leftSensor>=sensorTrashold){
			switch(currentDirection){
				case North: 
					if(currentLocationFrontCol-2>=0)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case South: 
					if(currentLocationFrontCol+2<=14)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case East: 
					if(currentLocationFrontRow-2>=0)
						addObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
				case West: 
					if(currentLocationFrontRow+2<=19)
						addObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
			}
		}
		if(rightSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontCol+2<=14)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case South:
					if(currentLocationFrontCol-2>=0)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case East:
					if(currentLocationFrontRow+2<=19)
						addObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
				case West:
					if(currentLocationFrontRow-2>=0)
						addObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
			}
		}
		if(frontMidSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						addObstacle(currentLocationFrontRow-1,currentLocationFrontCol);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						addObstacle(currentLocationFrontRow+1,currentLocationFrontCol);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						addObstacle(currentLocationFrontRow,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						addObstacle(currentLocationFrontRow-1,currentLocationFrontCol);
					break;
			}
		}
		if(frontLeftSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						addObstacle(currentLocationFrontRow-1,currentLocationFrontCol-1);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						addObstacle(currentLocationFrontRow+1,currentLocationFrontCol+1);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						addObstacle(currentLocationFrontRow-1,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						addObstacle(currentLocationFrontRow+1,currentLocationFrontCol-1);
					break;
			}
		}
		if(frontRightSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						addObstacle(currentLocationFrontRow-1,currentLocationFrontCol+1);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						addObstacle(currentLocationFrontRow+1,currentLocationFrontCol-1);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						addObstacle(currentLocationFrontRow+1,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						addObstacle(currentLocationFrontRow-1,currentLocationFrontCol-1);
					break;
			}
		}
	}
	private void addObstacle(int row, int col){
		this.obstacleData[row][col] = 1;
		
		int newData[][] = new int[20][15];//17,3 17,11
		for(int i=0;i<20;i++){
			for(int j=14;j>0;j++){
				newData[i][Math.abs(14-j)]=1;
			}
		}
		
		//format the data[][]
		MapUI.updateMap(newData, 1);
		System.out.println("OBSTICAL DETECTED AT "+row+","+col);
	}
	private void addExploredArea(int midFrontRow, int midFrontCol, Direction robotDirection){
		this.exploredData[midFrontRow][midFrontCol] = 1;
		if(robotDirection == Direction.North){
			this.exploredData[midFrontRow][midFrontCol+1]=1;
			this.exploredData[midFrontRow][midFrontCol-1]=1;
		}
		if(robotDirection == Direction.South){
			this.exploredData[midFrontRow][midFrontCol+1]=1;
			this.exploredData[midFrontRow][midFrontCol-1]=1;
		}
		if(robotDirection == Direction.East){
			this.exploredData[midFrontRow-1][midFrontCol]=1;
			this.exploredData[midFrontRow+1][midFrontCol]=1;
		}
		if(robotDirection == Direction.West){
			this.exploredData[midFrontRow-1][midFrontCol]=1;
			this.exploredData[midFrontRow+1][midFrontCol]=1;
		}
	}
	//TODO:
	private void returnToStart(){
		//TODO: algo to make the robot go back to start line; can do by stack maybe?
		//by adding the movement in a stack that pop back in reverse?
		//or by shortest path?
	}
	private void updateRobotPosition(int robotHeadRow, int robotHeadCol){
		this.currentLocationFrontRow = robotHeadRow;
		this.currentLocationFrontCol = robotHeadCol;
	}
	
	
	//***********************************//
	//		SHORTEST PATH METHODS		 //
	//***********************************//
	private void findPath(int[][] currentLocation){
		//TODO: get the shortest path;
	}
	
	
}
