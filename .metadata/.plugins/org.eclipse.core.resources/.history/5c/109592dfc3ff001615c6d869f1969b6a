package com.sg.ntu.mdp;

import java.util.ArrayList;
import java.util.LinkedList;

import com.sg.ntu.mdp.simulator.MapUI;

import model.AlgoNode;
import model.Direction;
import model.RobotCallback;
import model.AlgoEdge;
import model.AlgoGraph;

public class Algothrim {
	private float coverageLimit = 100f;
	
	private static boolean isGoalReached = false;
	
	public static Direction currentDirection = Direction.East;
	private float sensorTrashold = 1.00f;
	
	public static int[][]exploredData = new int[20][15];
	public static int[][]obstacleData = new int[20][15];
		
	public static int currentLocationFrontRow;
	public static int currentLocationFrontCol;
	
	public Algothrim(int[][] exploredData, int[][]obstacleData, int currentLocationFrontRow, int currentLocationFrontCol){
		//set the goal and start area to explored
		this.exploredData[19][0] = 1; this.exploredData[0][14] = 1;
		this.exploredData[19][1] = 1; this.exploredData[0][13] = 1;
		this.exploredData[19][2] = 1; this.exploredData[0][12] = 1;
		this.exploredData[18][0] = 1; this.exploredData[1][14] = 1;
		this.exploredData[18][1] = 1; this.exploredData[1][13] = 1;
		this.exploredData[18][2] = 1; this.exploredData[1][12] = 1;
		this.exploredData[17][0] = 1; this.exploredData[2][14] = 1;
		this.exploredData[17][1] = 1; this.exploredData[2][13] = 1;
		this.exploredData[17][2] = 1; this.exploredData[2][12] = 1;
		
		if(currentLocationFrontRow != -1 && currentLocationFrontCol!=-1){
			//TODO:change the starting direction base on the row,col (17,2[east),etc
			this.currentLocationFrontRow = currentLocationFrontRow;
			this.currentLocationFrontCol = currentLocationFrontCol;
		}
	}
	
	//***************************************//
	//  EXPLORATION METHODS FOR GOD			 //
	//***************************************//
	AlgoNode[][] explorationNodes = new AlgoNode[19][13];
	int[][]obstacles = new int[20][15];
	int[][]explores = new int[20][15];
	AlgoNode currentTarget;
	AlgoNode currentNode = new AlgoNode(18,1);
	boolean hasGoalReached=false;
	
	public void godsExploration(float frontMidSensor, float frontLeftSensor, float frontRightSensor, float rightSensor, float leftSensor, final RobotCallback callback){
		updateObstacle(frontMidSensor, frontLeftSensor, frontRightSensor, rightSensor, leftSensor);
		
		DijkstraAlgorithm dijkstra = new DijkstraAlgorithm(buildGraphForExploration());
        dijkstra.execute(currentNode);
        
        currentNode = updateCurrentNode();
        updateFootstep(currentNode.getNodeRowIndex(),currentNode.getNodeColIndex());
        currentNode.setVisited(true);
        
        if(currentNode.getNodeRowIndex()==1&&currentNode.getNodeColIndex()==13)
        	hasGoalReached=true;
        if(hasGoalReached==false)
        	currentTarget = explorationNodes[17][12];
        
        LinkedList<AlgoNode> path = dijkstra.getPath(currentTarget);
        
		if(path==null){
//			 updateFootstep(currentTarget.getNodeRowIndex(),currentTarget.getNodeColIndex());
//			System.out.println("in LOOP");
			explores[currentNode.getNodeRowIndex()][currentNode.getNodeColIndex()]=1;
			//TOdo:test this
			boolean escloop=false;
			
			for(int i=exploredData.length;i>0i++){
				for(int j=0;i<exploredData[i].length;i++){
					
				}
			}
			
			
			/*for(int i=explorationNodes.length-1;i>0;i--){
				for(int j=0;j<explorationNodes[i].length;j++){
					if(explorationNodes[i][j]!=null){
//						if(explorationNodes[i][j].isVisited()==false){
//							currentTarget = explorationNodes[i][j];
//							dijkstra.execute(currentNode);
//							path = dijkstra.getPath(currentTarget);
////							System.out.println("target="+currentTarget);
////							System.out.println("FACING"+currentDirection.toString());
//							escloop=true;
//							break;
//						}
						if(exploredData[explorationNodes[i][j].getNodeRowIndex()][explorationNodes[i][j].getNodeColIndex()]==0||exploredData[i][j]==0){
							currentTarget = explorationNodes[i][j];
							dijkstra.execute(currentNode);
							path = dijkstra.getPath(currentTarget);
							System.out.println("target="+currentTarget);
//							System.out.println("FACING"+currentDirection.toString());
							escloop=true;
							break;
						}	
					}
				}
				if(escloop)
					break;
			}
		}
		*/
		//finally decide the command to give to the robot/UI only the index(1) command	
		if(path==null){
			System.out.println("returning god");
			returnGodHome(callback);
		}else{
			AlgoNode nextNodeToTravel =  path.get(1);
			int tempRow = -1;
	        int tempCol = -1;
			switch(currentDirection){
				case North:
					tempRow = currentLocationFrontRow+1;
					tempCol = currentLocationFrontCol;
					if(nextNodeToTravel.getNodeRowIndex()<tempRow){
						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
						callback.changeDirection(Direction.LEFT, 2);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
						callback.changeDirection(Direction.RIGHT, 1);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
						callback.changeDirection(Direction.LEFT, 1);
//						callback.moveForward(1);
					}
					break;
				case South:
					tempRow = currentLocationFrontRow-1;
					tempCol = currentLocationFrontCol;
					if(nextNodeToTravel.getNodeRowIndex()<tempRow){
						callback.changeDirection(Direction.LEFT, 2);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
						callback.changeDirection(Direction.LEFT, 1);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
						callback.changeDirection(Direction.RIGHT, 1);
//						callback.moveForward(1);
					}
					break;
				case East:
					tempRow = currentLocationFrontRow;
					tempCol = currentLocationFrontCol-1;
					if(nextNodeToTravel.getNodeRowIndex()<tempRow){
						callback.changeDirection(Direction.LEFT, 1);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
						callback.changeDirection(Direction.RIGHT, 1);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
						callback.changeDirection(Direction.LEFT, 2);
//						callback.moveForward(1);
					}
					break;
				case West:
					tempRow = currentLocationFrontRow;
					tempCol = currentLocationFrontCol+1;
					if(nextNodeToTravel.getNodeRowIndex()<tempRow){
						callback.changeDirection(Direction.RIGHT, 1);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
						callback.changeDirection(Direction.LEFT, 1);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
						callback.changeDirection(Direction.LEFT, 2);
//						callback.moveForward(1);
					}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
						callback.moveForward(1);
						
					}
					break;
			}
			callback.sendRobotInstruction(null);
		}
		
	}
	public AlgoNode updateCurrentNode(){
		AlgoNode node = null;
		switch(currentDirection){
		case North:
				node = new AlgoNode(currentLocationFrontRow+1,currentLocationFrontCol);
			break;
		case South:
			node = new AlgoNode(currentLocationFrontRow-1,currentLocationFrontCol);
			break;
		case East:
			node = new AlgoNode(currentLocationFrontRow,currentLocationFrontCol-1);
			break;
		case West:
			node = new AlgoNode(currentLocationFrontRow,currentLocationFrontCol+1);
			break;
		}
		return node;
		
	}
	public AlgoGraph buildGraphForExploration(){
		ArrayList<AlgoEdge> edges = new ArrayList<>();
		ArrayList<AlgoNode> nodes = new ArrayList<>();
		explorationNodes = trimGraphForExploration(generateNodePool());
	
		
		for(int i=0;i<explorationNodes.length;i++){
			for(int j=0;j<explorationNodes[i].length;j++){
				if(explorationNodes[i][j]!=null){
//					System.out.println(nodePool[i][j]);
					nodes.add(explorationNodes[i][j]);
				}
			}
		}
		//blind the edges
		for(int i=0;i<explorationNodes.length;i++){
			for(int j=0;j<explorationNodes[i].length;j++){

				//set front node
				if((j+1)<explorationNodes[i].length){
					if(explorationNodes[i][j+1]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i][j+1].getNodeRowIndex()+","+explorationNodes[i][j+1].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i][j+1],1));
					}
				}
					
				//set left node
				if((i-1)>=0){
					if(explorationNodes[i-1][j]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i-1][j].getNodeRowIndex()+","+explorationNodes[i-1][j].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i-1][j],2));
					}
				}
					
				//set right node
				if((i+1)<explorationNodes.length){
					if(explorationNodes[i+1][j]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i+1][j].getNodeRowIndex()+","+explorationNodes[i+1][j].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i+1][j],2));
					}
				}
				
				//set back node
				if((j-1)>=0){
					if(explorationNodes[i][j-1]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i][j-1].getNodeRowIndex()+","+explorationNodes[i][j-1].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i][j-1],3));
					}
				}
			}
		}
		
		
		return new AlgoGraph(nodes, edges);
	}
	public AlgoNode[][] trimGraphForExploration(AlgoNode[][] nodePool){
		for(int i=0;i<nodePool.length;i++){
			for(int j=0;j<nodePool[i].length;j++){
				int actualrow = 18-i;
				int actualcol = j+1;
				
				//check center is obstacle
				if(obstacles[actualrow][actualcol]==1){
					nodePool[i][j]=null;
				}
				//check forward is obstacle
				if(obstacles[actualrow][actualcol+1]==1){
					nodePool[i][j]=null;
				}
				//check forwardright is obsacle
				if(obstacles[actualrow-1][actualcol+1]==1){
					nodePool[i][j]=null;
				}
				//check forwardleft is obstacle
				if(obstacles[actualrow+1][actualcol+1]==1){
					nodePool[i][j]=null;
				}
				//check back isobstacle
				if(obstacles[actualrow][actualcol-1]==1){
					nodePool[i][j]=null;
				}
				//check backright is obstacle
				if(obstacles[actualrow-1][actualcol-1]==1){
					nodePool[i][j]=null;
				}
				//check backleft is obstacle
				if(obstacles[actualrow+1][actualcol-1]==1){
					nodePool[i][j]=null;
				}
				//check right is obstacle
				if(obstacles[actualrow-1][actualcol]==1){
					nodePool[i][j]=null;
				}
				//check left is obstacle
				if(obstacles[actualrow-1][actualcol]==1){
					nodePool[i][j]=null;
				}
				
			}
		}
		return nodePool;
	}
	public void updateObstacle(float frontMidSensor, float frontLeftSensor, float frontRightSensor, float rightSensor, float leftSensor){
		if(leftSensor>=sensorTrashold){
			switch(currentDirection){
				case North: 
					if(currentLocationFrontCol-2>=0)
						updateObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case South: 
					if(currentLocationFrontCol+2<=14)
						updateObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case East: 
					if(currentLocationFrontRow-2>=0)
						updateObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
				case West: 
					if(currentLocationFrontRow+2<=19)
						updateObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
			}
		}else{
			switch(currentDirection){
			case North: 
					if(currentLocationFrontCol-2>=0)
						updateExploredArea(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case South: 
					if(currentLocationFrontCol+2<=14)
						updateExploredArea(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case East: 
					if(currentLocationFrontRow-2>=0)
						updateExploredArea(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
				case West: 
					if(currentLocationFrontRow+2<=19)
						updateExploredArea(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
			}
		}
		if(rightSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontCol+2<=14)
						updateObstacle(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case South:
					if(currentLocationFrontCol-2>=0)
						updateObstacle(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case East:
					if(currentLocationFrontRow+2<=19)
						updateObstacle(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
				case West:
					if(currentLocationFrontRow-2>=0)
						updateObstacle(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
			}
		}
		else{
			switch(currentDirection){
				case North:
					if(currentLocationFrontCol+2<=14)
						updateExploredArea(currentLocationFrontRow,currentLocationFrontCol+2);
					break;
				case South:
					if(currentLocationFrontCol-2>=0)
						updateExploredArea(currentLocationFrontRow,currentLocationFrontCol-2);
					break;
				case East:
					if(currentLocationFrontRow+2<=19)
						updateExploredArea(currentLocationFrontRow+2,currentLocationFrontCol);
					break;
				case West:
					if(currentLocationFrontRow-2>=0)
						updateExploredArea(currentLocationFrontRow-2,currentLocationFrontCol);
					break;
			}
		}
		if(frontMidSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						updateObstacle(currentLocationFrontRow-1,currentLocationFrontCol);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						updateObstacle(currentLocationFrontRow+1,currentLocationFrontCol);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						updateObstacle(currentLocationFrontRow,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						updateObstacle(currentLocationFrontRow,currentLocationFrontCol-1);
					break;
			}
		}else{
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						updateExploredArea(currentLocationFrontRow-1,currentLocationFrontCol);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						updateExploredArea(currentLocationFrontRow+1,currentLocationFrontCol);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						updateExploredArea(currentLocationFrontRow,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						updateExploredArea(currentLocationFrontRow,currentLocationFrontCol-1);
					break;
			}
		}
		if(frontLeftSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						updateObstacle(currentLocationFrontRow-1,currentLocationFrontCol-1);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						updateObstacle(currentLocationFrontRow+1,currentLocationFrontCol+1);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						updateObstacle(currentLocationFrontRow-1,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						updateObstacle(currentLocationFrontRow+1,currentLocationFrontCol-1);
					break;
			}
		}else{
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						updateExploredArea(currentLocationFrontRow-1,currentLocationFrontCol-1);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						updateExploredArea(currentLocationFrontRow+1,currentLocationFrontCol+1);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						updateExploredArea(currentLocationFrontRow-1,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						updateExploredArea(currentLocationFrontRow+1,currentLocationFrontCol-1);
					break;
			}
		}
		
		if(frontRightSensor>=sensorTrashold){
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						updateObstacle(currentLocationFrontRow-1,currentLocationFrontCol+1);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						updateObstacle(currentLocationFrontRow+1,currentLocationFrontCol-1);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						updateObstacle(currentLocationFrontRow+1,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						updateObstacle(currentLocationFrontRow-1,currentLocationFrontCol-1);
					break;
			}
		}else{
			switch(currentDirection){
				case North:
					if(currentLocationFrontRow-1>=0)
						updateExploredArea(currentLocationFrontRow-1,currentLocationFrontCol+1);
					break;
				case South:
					if(currentLocationFrontRow+1<=19)
						updateExploredArea(currentLocationFrontRow+1,currentLocationFrontCol-1);
					break;
				case East:
					if(currentLocationFrontCol+1<=14)
						updateExploredArea(currentLocationFrontRow+1,currentLocationFrontCol+1);
					break;
				case West:
					if(currentLocationFrontCol-1>=0)
						updateExploredArea(currentLocationFrontRow-1,currentLocationFrontCol-1);
					break;
			}
		}
	}
	public void updateObstacle(int row, int col){
		this.obstacles[row][col] = 1;
		int newData[][] = new int[20][15];//17,3 17,11
		for(int i=0;i<20;i++){
			for(int j=0;j<15;j++){
				newData[i][j]=this.obstacles[i][Math.abs(14-j)];
			}
		}
		MapUI.updateMap(newData, 1);
	}
	public void updateFootstep(int row,int col){
		this.explores[row][col]=1;
	}
	public void updateExploredArea(int row, int col){
		this.exploredData[row][col] = 1;
		int newData[][] = new int[20][15];//17,3 17,11
		for(int i=0;i<20;i++){
			for(int j=0;j<15;j++){
				newData[i][j]=this.exploredData[i][Math.abs(14-j)];
			}
		}
		MapUI.updateMap(newData, 0);	
	}
	//***********************************************//
	// 			GODS RETURN FROM EXPLORATION		 //
	//***********************************************//
	boolean hasReturnedHome=false;
	public void returnGodHome(RobotCallback callback){
		
		DijkstraAlgorithm dijkstra = new DijkstraAlgorithm(buildGraphForReturningHome());
        dijkstra.execute(currentNode);
        
        currentNode = updateCurrentNode();
        
        
        if(currentNode.getNodeRowIndex()==18&&currentNode.getNodeColIndex()==1)
        	hasReturnedHome=true;
        if(hasReturnedHome==false){
        	System.out.println("finding way home");
        	currentTarget = explorationNodes[0][0];
        	LinkedList<AlgoNode> path = dijkstra.getPath(currentTarget);
    		
    		//finally decide the command to give to the robot/UI only the index(1) command	
    		
    		AlgoNode nextNodeToTravel =  path.get(1);
    		System.out.println("RETURNING NODE TO TRAVEL"+nextNodeToTravel);
    		System.out.println("RETURNING CURRENT POSITION"+currentNode);
    		int tempRow = -1;
            int tempCol = -1;
    		switch(currentDirection){
    			case North:
    				tempRow = currentLocationFrontRow+1;
    				tempCol = currentLocationFrontCol;
    				if(nextNodeToTravel.getNodeRowIndex()<tempRow){
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
    					callback.changeDirection(Direction.LEFT, 2);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
    					callback.changeDirection(Direction.RIGHT, 1);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
    					callback.changeDirection(Direction.LEFT, 1);
    					callback.moveForward(1);
    				}
    				break;
    			case South:
    				tempRow = currentLocationFrontRow-1;
    				tempCol = currentLocationFrontCol;
    				if(nextNodeToTravel.getNodeRowIndex()<tempRow){
    					callback.changeDirection(Direction.LEFT, 2);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
    					callback.changeDirection(Direction.LEFT, 1);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
    					callback.changeDirection(Direction.RIGHT, 1);
    					callback.moveForward(1);
    				}
    				break;
    			case East:
    				tempRow = currentLocationFrontRow;
    				tempCol = currentLocationFrontCol-1;
    				if(nextNodeToTravel.getNodeRowIndex()<tempRow){
    					callback.changeDirection(Direction.LEFT, 1);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
    					callback.changeDirection(Direction.RIGHT, 1);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
    					callback.changeDirection(Direction.LEFT, 2);
    					callback.moveForward(1);
    				}
    				break;
    			case West:
    				tempRow = currentLocationFrontRow;
    				tempCol = currentLocationFrontCol+1;
    				if(nextNodeToTravel.getNodeRowIndex()<tempRow){
    					callback.changeDirection(Direction.RIGHT, 1);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeRowIndex()>tempRow){
    					callback.changeDirection(Direction.LEFT, 1);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()>tempCol){
    					callback.changeDirection(Direction.LEFT, 2);
    					callback.moveForward(1);
    				}else if(nextNodeToTravel.getNodeColIndex()<tempCol){
    					callback.moveForward(1);
    					
    				}
    				break;
    		}
    		callback.sendRobotInstruction(null);
        }else{
        	System.out.println("AT HOME LIAO");
        	callback.readyForFastestPath();
//        	callback.sendRobotInstruction(null);
//			callback.sendRobotInstruction(null);
        }
	}
	public AlgoGraph buildGraphForReturningHome(){
		ArrayList<AlgoEdge> edges = new ArrayList<>();
		ArrayList<AlgoNode> nodes = new ArrayList<>();
		explorationNodes = trimGraphForReturningHome(generateNodePool());
		
		for(int i=0;i<explorationNodes.length;i++){
			for(int j=0;j<explorationNodes[i].length;j++){
				if(explorationNodes[i][j]!=null){
//					System.out.println(nodePool[i][j]);
					nodes.add(explorationNodes[i][j]);
				}
			}
		}
		//blind the edges
		for(int i=0;i<explorationNodes.length;i++){
			for(int j=0;j<explorationNodes[i].length;j++){

				//set front node
				if((j+1)<explorationNodes[i].length){
					if(explorationNodes[i][j+1]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i][j+1].getNodeRowIndex()+","+explorationNodes[i][j+1].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i][j+1],1));
					}
				}
					
				//set left node
				if((i-1)>=0){
					if(explorationNodes[i-1][j]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i-1][j].getNodeRowIndex()+","+explorationNodes[i-1][j].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i-1][j],2));
					}
				}
					
				//set right node
				if((i+1)<explorationNodes.length){
					if(explorationNodes[i+1][j]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i+1][j].getNodeRowIndex()+","+explorationNodes[i+1][j].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i+1][j],2));
					}
				}
				
				//set back node
				if((j-1)>=0){
					if(explorationNodes[i][j-1]!=null&&explorationNodes[i][j]!=null){
						edges.add(new AlgoEdge(explorationNodes[i][j].getNodeRowIndex()+","+explorationNodes[i][j].getNodeColIndex()+"TO"+explorationNodes[i][j-1].getNodeRowIndex()+","+explorationNodes[i][j-1].getNodeColIndex(),explorationNodes[i][j],explorationNodes[i][j-1],3));
					}
				}
			}
		}
		
		
		return new AlgoGraph(nodes, edges);
	}
	public AlgoNode[][] trimGraphForReturningHome(AlgoNode[][] nodePool){
		for(int i=0;i<nodePool.length;i++){
			for(int j=0;j<nodePool[i].length;j++){
				int actualrow = 18-i;
				int actualcol = j+1;
				
				//check center is obstacle
				if(obstacles[actualrow][actualcol]==1||exploredData[actualrow][actualcol]==0){
					nodePool[i][j]=null;
				}
				//check forward is obstacle
				if(obstacles[actualrow][actualcol+1]==1||exploredData[actualrow][actualcol+1]==0){
					nodePool[i][j]=null;
				}
				//check forwardright is obsacle
				if(obstacles[actualrow-1][actualcol+1]==1||exploredData[actualrow-1][actualcol+1]==0){
					nodePool[i][j]=null;
				}
				//check forwardleft is obstacle
				if(obstacles[actualrow+1][actualcol+1]==1||exploredData[actualrow+1][actualcol+1]==0){
					nodePool[i][j]=null;
				}
				//check back isobstacle
				if(obstacles[actualrow][actualcol-1]==1||exploredData[actualrow][actualcol-1]==0){
					nodePool[i][j]=null;
				}
				//check backright is obstacle
				if(obstacles[actualrow-1][actualcol-1]==1||exploredData[actualrow-1][actualcol-1]==0){
					nodePool[i][j]=null;
				}
				//check backleft is obstacle
				if(obstacles[actualrow+1][actualcol-1]==1||exploredData[actualrow+1][actualcol-1]==0){
					nodePool[i][j]=null;
				}
				//check right is obstacle
				if(obstacles[actualrow-1][actualcol]==1||exploredData[actualrow-1][actualcol]==0){
					nodePool[i][j]=null;
				}
				//check left is obstacle
				if(obstacles[actualrow-1][actualcol]==1||exploredData[actualrow-1][actualcol]==0){
					nodePool[i][j]=null;
				}
				
			}
		}
		return nodePool;
	}
	
	//***********************************//
	//		SHORTEST PATH METHODS		 //
	//***********************************//
	public void findPath(RobotCallback callback){
		System.out.println("finiding fastest path");
		AlgoGraph tree1 = generateAlgoTree();
		
		
			AlgoGraph tree = generateAlgoTree();
			DijkstraAlgorithm dijkstra = new DijkstraAlgorithm(tree);
            dijkstra.execute(tree.getVertexes().get(1));
            LinkedList<AlgoNode> path = dijkstra.getPath(tree.getVertexes().get(tree.getVertexes().size()-1));
            
            //from 18,2
           MapUI.readyRobotAtStartPosition();
           //TODO:finish this
           
           
            	 int tempRow = 18;
                 int tempCol = 2;
                 Direction tempDirection = currentDirection;
                 callback.moveForward(1);
            	for(int i=1;i<path.size();i++){
                	System.out.println(path.get(i));
                	switch(tempDirection){
                		case North:
                			
                			if(path.get(i).getNodeRowIndex()<tempRow){
                				callback.moveForward(1);
                				tempDirection = Direction.North;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()>tempCol){
                				callback.changeDirection(Direction.RIGHT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.East;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()<tempCol){
                				callback.changeDirection(Direction.LEFT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.West;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}
                			else if(path.get(i).getNodeRowIndex()>tempRow){
                				callback.changeDirection(Direction.LEFT, 2);
                				callback.moveForward(1);
                			}
                			break;
                		case South:
                			if(path.get(i).getNodeRowIndex()<tempRow){
                				callback.changeDirection(Direction.LEFT, 2);
                				callback.moveForward(1);
                				tempDirection = Direction.North;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()>tempCol){
                				callback.changeDirection(Direction.LEFT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.East;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeRowIndex()>tempRow){
                				callback.moveForward(1);
                				tempDirection = Direction.South;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()<tempCol){
                				callback.changeDirection(Direction.RIGHT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.West;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}
                			break;
                		case East:
                			if(path.get(i).getNodeRowIndex()<tempRow){
                				callback.changeDirection(Direction.LEFT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.North;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()>tempCol){
                				callback.moveForward(1);
                				tempDirection = Direction.East;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeRowIndex()>tempRow){
                				callback.changeDirection(Direction.RIGHT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.South;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()<tempCol){
                				callback.changeDirection(Direction.RIGHT, 2);
                				callback.moveForward(1);
                				tempDirection = Direction.West;
                				tempRow=path.get(i).getNodeRowIndex();
                			}
                			break;
                		case West:
                			if(path.get(i).getNodeRowIndex()<tempRow){
                				callback.changeDirection(Direction.RIGHT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.North;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                				System.out.println("FAcing west turning right");
                			}else if(path.get(i).getNodeColIndex()>tempCol){
                				callback.changeDirection(Direction.RIGHT, 2);
                				callback.moveForward(1);
                				tempDirection = Direction.East;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeRowIndex()<tempRow){
                				callback.changeDirection(Direction.LEFT, 1);
                				callback.moveForward(1);
                				tempDirection = Direction.South;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}else if(path.get(i).getNodeColIndex()>tempCol){
                				callback.moveForward(1);
                				tempDirection = Direction.West;
                				tempRow=path.get(i).getNodeRowIndex();
                				tempCol=path.get(i).getNodeColIndex();
                			}
                			break;
                	}
                }
            	callback.readyForFastestPath();
            
            
		
	}	
	public AlgoGraph generateAlgoTree(){
		//create the nodes indivually so we can reference instead of recreating the leaf so the tree wont go into a loop
		AlgoNode[][] nodePool = trimNodePool(generateNodePool());
//		AlgoGraph algoTree = new AlgoGraph(nodePool[0][0]);
//		System.out.println(algoTree.getRoot().getNodeRowIndex());
		
		ArrayList<AlgoEdge> edges = new ArrayList<>();
		ArrayList<AlgoNode> nodes = new ArrayList<>();
		
		//building the nodes
		for(int i=0;i<nodePool.length;i++){
			for(int j=0;j<nodePool[i].length;j++){
				if(nodePool[i][j]!=null){
//					System.out.println(nodePool[i][j]);
					nodes.add(nodePool[i][j]);
				}
			}
		}
		//building the edges
		for(int i=0;i<nodePool.length;i++){
			for(int j=0;j<nodePool[i].length;j++){

				//set front node
				if((j+1)<nodePool[i].length){
					if(nodePool[i][j+1]!=null&&nodePool[i][j]!=null){
						edges.add(new AlgoEdge(nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+"TO"+nodePool[i][j+1].getNodeRowIndex()+","+nodePool[i][j+1].getNodeColIndex(),nodePool[i][j],nodePool[i][j+1],1));
//						System.out.println("parent=("+nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+") child=("+nodePool[i][j+1].getNodeRowIndex()+","+nodePool[i][j+1].getNodeColIndex()+")");
					}
				}else{
//					System.out.println(nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+" has no front node");
				}
					
				//set left node
				if((i-1)>=0){
					if(nodePool[i-1][j]!=null&&nodePool[i][j]!=null){
						edges.add(new AlgoEdge(nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+"TO"+nodePool[i-1][j].getNodeRowIndex()+","+nodePool[i-1][j].getNodeColIndex(),nodePool[i][j],nodePool[i-1][j],2));
					}
//					System.out.println("parent=("+nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+") child=("+nodePool[i-1][j].getNodeRowIndex()+","+nodePool[i-1][j].getNodeColIndex()+")");
				}else{
//					System.out.println(i+","+j+" has no left node");
				}
					
				//set right node
				if((i+1)<nodePool.length){
					if(nodePool[i+1][j]!=null&&nodePool[i][j]!=null){
						edges.add(new AlgoEdge(nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+"TO"+nodePool[i+1][j].getNodeRowIndex()+","+nodePool[i+1][j].getNodeColIndex(),nodePool[i][j],nodePool[i+1][j],2));
					}
//					System.out.println("parent=("+nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+") child=("+nodePool[i+1][j].getNodeRowIndex()+","+nodePool[i+1][j].getNodeColIndex()+")");
				}else{
//					System.out.println(i+","+j+" has no right node");
				}
				
				//set back node
				if((j-1)>=0){
					if(nodePool[i][j-1]!=null&&nodePool[i][j]!=null){
						edges.add(new AlgoEdge(nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+"TO"+nodePool[i][j-1].getNodeRowIndex()+","+nodePool[i][j-1].getNodeColIndex(),nodePool[i][j],nodePool[i][j-1],3));
//						System.out.println("chil2d=("+nodePool[i][j-1].getNodeRowIndex()+","+nodePool[i][j-1].getNodeColIndex()+")");
					}
						
//					System.out.println("parent=("+nodePool[i][j].getNodeRowIndex()+","+nodePool[i][j].getNodeColIndex()+") child=("+nodePool[i][j-1].getNodeRowIndex()+","+nodePool[i][j-1].getNodeColIndex()+")");
				}else{
//					System.out.println(i+","+j+" has no back node");
				}
			}
		}
		AlgoGraph graph = new AlgoGraph(nodes, edges);
		
		return graph;
	}
	public AlgoNode[][] generateNodePool(){
		AlgoNode[][] nodePool = new AlgoNode[18][13];
		for(int i=0;i<nodePool.length;i++){
			for(int j=0;j<nodePool[i].length;j++){
				AlgoNode child = new AlgoNode(18-i,j+1);
				nodePool[i][j] = child;
			}
		}
		return nodePool;
	}
	public AlgoNode[][] trimNodePool(AlgoNode[][] nodePool){
		for(int i=0;i<nodePool.length;i++){
			for(int j=0;j<nodePool[i].length;j++){
				int actualrow = 18-i;
				int actualcol = j+1;
				
				//check center is obstacle
				if(obstacles[actualrow][actualcol]==1||exploredData[actualrow][actualcol]==0){
					nodePool[i][j]=null;
				}
				//check forward is obstacle
				if(obstacles[actualrow][actualcol+1]==1||exploredData[actualrow][actualcol+1]==0){
					nodePool[i][j]=null;
				}
				//check forwardright is obsacle
				if(obstacles[actualrow-1][actualcol+1]==1||exploredData[actualrow-1][actualcol+1]==0){
					nodePool[i][j]=null;
				}
				//check forwardleft is obstacle
				if(obstacles[actualrow+1][actualcol+1]==1||exploredData[actualrow+1][actualcol+1]==0){
					nodePool[i][j]=null;
				}
				//check back isobstacle
				if(obstacles[actualrow][actualcol-1]==1||exploredData[actualrow][actualcol-1]==0){
					nodePool[i][j]=null;
				}
				//check backright is obstacle
				if(obstacles[actualrow-1][actualcol-1]==1||exploredData[actualrow-1][actualcol-1]==0){
					nodePool[i][j]=null;
				}
				//check backleft is obstacle
				if(obstacles[actualrow+1][actualcol-1]==1||exploredData[actualrow+1][actualcol-1]==0){
					nodePool[i][j]=null;
				}
				//check right is obstacle
				if(obstacles[actualrow-1][actualcol]==1||exploredData[actualrow-1][actualcol]==0){
					nodePool[i][j]=null;
				}
				//check left is obstacle
				if(obstacles[actualrow-1][actualcol]==1||exploredData[actualrow-1][actualcol]==0){
					nodePool[i][j]=null;
				}
				
			}
		}
		
		return nodePool;
	}
	public boolean isGoalReachable(){
		return isGoalReached;
	}
	
}
