package com.sg.ntu.mdp;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import model.AlgoEdge;
import model.AlgoGraph;
import model.AlgoNode;

public class DijkstraAlgorithm {
	  private final List<AlgoNode> nodes;
      private final List<AlgoEdge> edges;
      private Set<AlgoNode> settledNodes;
      private Set<AlgoNode> unSettledNodes;
      private Map<AlgoNode, AlgoNode> predecessors;
      private Map<AlgoNode, Integer> distance;

      public DijkstraAlgorithm(AlgoGraph graph) {
              // create a copy of the array so that we can operate on this array
              this.nodes = new ArrayList<AlgoNode>(graph.getVertexes());
              this.edges = new ArrayList<AlgoEdge>(graph.getEdges());
      }

      public void execute(AlgoNode source) {
              settledNodes = new HashSet<AlgoNode>();
              unSettledNodes = new HashSet<AlgoNode>();
              distance = new HashMap<Vertex, Integer>();
              predecessors = new HashMap<AlgoNode, AlgoNode>();
              distance.put(source, 0);
              unSettledNodes.add(source);
              while (unSettledNodes.size() > 0) {
            	  		AlgoNode node = getMinimum(unSettledNodes);
                      settledNodes.add(node);
                      unSettledNodes.remove(node);
                      findMinimalDistances(node);
              }
      }

      private void findMinimalDistances(AlgoNode node) {
              List<AlgoNode> adjacentNodes = getNeighbors(node);
              for (AlgoNode target : adjacentNodes) {
                      if (getShortestDistance(target) > getShortestDistance(node)
                                      + getDistance(node, target)) {
                              distance.put(target, getShortestDistance(node)
                                              + getDistance(node, target));
                              predecessors.put(target, node);
                              unSettledNodes.add(target);
                      }
              }

      }

      private int getDistance(AlgoNode node, AlgoNode target) {
              for (AlgoEdge edge : edges) {
                      if (edge.getSourceNode().equals(node)
                                      && edge.getDestinaionNode().equals(target)) {
                              return edge.getWeight();
                      }
              }
              throw new RuntimeException("Should not happen");
      }

      private List<AlgoNode> getNeighbors(AlgoNode node) {
              List<AlgoNode> neighbors = new ArrayList<AlgoNode>();
              for (AlgoEdge edge : edges) {
                      if (edge.getSourceNode().equals(node)
                                      && !isSettled(edge.getDestinaionNode())) {
                              neighbors.add(edge.getDestinaionNode());
                      }
              }
              return neighbors;
      }

      private AlgoNode getMinimum(Set<AlgoNode> vertexes) {
    	  AlgoNode minimum = null;
              for (AlgoNode vertex : vertexes) {
                      if (minimum == null) {
                              minimum = vertex;
                      } else {
                              if (getShortestDistance(vertex) < getShortestDistance(minimum)) {
                                      minimum = vertex;
                              }
                      }
              }
              return minimum;
      }

      private boolean isSettled(AlgoNode vertex) {
              return settledNodes.contains(vertex);
      }

      private int getShortestDistance(AlgoNode destination) {
              Integer d = distance.get(destination);
              if (d == null) {
                      return Integer.MAX_VALUE;
              } else {
                      return d;
              }
      }

      /*
       * This method returns the path from the source to the selected target and
       * NULL if no path exists
       */
      public LinkedList<AlgoNode> getPath(AlgoNode target) {
              LinkedList<AlgoNode> path = new LinkedList<AlgoNode>();
              AlgoNode step = target;
              // check if a path exists
              if (predecessors.get(step) == null) {
                      return null;
              }
              path.add(step);
              while (predecessors.get(step) != null) {
                      step = predecessors.get(step);
                      path.add(step);
              }
              // Put it into the correct order
              Collections.reverse(path);
              return path;
      }

}
